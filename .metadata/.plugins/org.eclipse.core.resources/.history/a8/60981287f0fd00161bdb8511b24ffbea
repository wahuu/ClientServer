package pl.server.dto;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.faces.context.FacesContext;
import javax.faces.event.PhaseId;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;

import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

/**
 * Entity implementation class for Entity: MessageBuffor
 *
 */
@Entity
public class Schedule implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 8997414322543783401L;
	@GeneratedValue
	@Id
	private int id;
	private String title;
	private Date dateFrom;
	private Date dateTo;
	@OneToOne
	@JoinColumn(name = "connection_id")
	private Connections connection;
	@OneToOne
	@JoinColumn(name = "media_id")
	private MediaLibrary media;

	public Schedule() {
		super();
	}

	public Schedule(String title, Date dateFrom, Date dateTo, Connections connection, MediaLibrary media) {
		super();
		this.title = title;
		this.dateFrom = dateFrom;
		this.dateTo = dateTo;
		this.connection = connection;
		this.media = media;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public Date getDateFrom() {
		return dateFrom;
	}

	public void setDateFrom(Date dateFrom) {
		this.dateFrom = dateFrom;
	}

	public Date getDateTo() {
		return dateTo;
	}

	public void setDateTo(Date dateTo) {
		this.dateTo = dateTo;
	}

	public Connections getConnection() {
		return connection;
	}

	public void setConnection(Connections connection) {
		this.connection = connection;
	}

	public MediaLibrary getMedia() {
		return media;
	}

	public void setMedia(MediaLibrary media) {
		this.media = media;
	}

	public StreamedContent getImage() throws IOException {
		FacesContext context = FacesContext.getCurrentInstance();
		if (context.getCurrentPhaseId() == PhaseId.RENDER_RESPONSE) {
			return new DefaultStreamedContent();
		} else {
			String imageId = context.getExternalContext().getRequestParameterMap().get("imageId");
			return new DefaultStreamedContent(
					new ByteArrayInputStream(mediaLibraryBeanImpl.getbyId(Integer.valueOf(imageId)).getData()));
		}
	}

	public List<MediaLibrary> getMedia() {
		return mediaLibraryBeanImpl.getAll();
	}

}
